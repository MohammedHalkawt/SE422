Agenda:
    Recap the idea of having synchronizers in multi-thread programming
    Introduce synchronous queues
    properties of this new tool
    Java code

Last lecture we talked about synchronizers in multi-thread programming:
    Although when we have multiple threads we can achieve parallelism and concurrency, we sometimes want a sequencial workflow of the threads, wanting one part of a thread to be guaranteed to run before another thread and so on.
    The speed of threads cannot be controlled by nature, we cannot control how fast or slow a thread can go without adding some complexity and logic, by using synchronizers, which implements sequencial guarantees.

Synchronous Queue:
    <E>: this is called a genetic, which allows you to create a class that can handle multiple data types. The E is a placeholder for the datatype, so if we use string, then instead of E we have use String. 

    This type of queue has the size of zero, meaning the Backlog of the queue is zero, which implies that this data structure cannot hold any element.
    Its useful because we can use it as a synchronizer instead of a data structure.
    If we call the isEmpty() it will always return true, and for asking for size it will always give 0, contains() always false, clear() does nothing, these mean that this is a data structure that should not be used as a data structure.

    BlockingQueue: it has the ability to put a thread into sleeping mode that is interacting with the data structre under certain conditions, blockingqueue itself is an interface that is implemented by the synchronousQueue.

    Code..



Extra from my lecture: (Kevin)

Recap: We don't control the speed of threads. If we talk about how fast or slow it runs, it depends on two factors. First one, the complexity of the computation it performs. Second factor depends on the environment. If the core is hot for example, it will be slower. It is very hard to predict the runtime of a thread. From one execution to another, it will change.

This is why you need a synchronizer. It's putting the block of code under synchronization. This provides an elegant situation to predict what kind of operation can occur. More clearly, you are defining how causality will form at run-time. Regardless of what the environment will do, you are creating a checkpoint. 

We are doing synchroniousqueue today. The best way to introduce this is by looking at the java class that implements or provides it.

Inside any documentation when you see the letter e, imagine its the datatype holder. In the case of the same example (he wrote for your class too), its a string.
queue 2 - Holds students <student>. If you try to add a student to a queue, it will work. Because, you've told the dataholder you need students.

Synchroniousqueue gets interesting where it can also be used subclasses if your polymorphism is good.
